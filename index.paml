<!DOCTYPE html>
<html(lang=en)
	<head
		<meta(charset=UTF-8)
		<link(rel=stylesheet,type=text/css,href=lib/pcss/base.pcss)
		<link(rel=stylesheet,type=text/css,href=lib/pcss/texto.pcss)
		<link(rel=stylesheet,type=text/css,href=lib/pcss/testing.pcss)
		<script(type="text/javascript",src="src/sizzle.js")
		<script(type="text/javascript",src="src/select.js")
		<script(type="text/javascript",src="lib/js/html-5.0.4.js")
		<script(type="text/javascript",src="lib/js/jquery-2.1.3.js")
		<script(type="text/javascript",src="lib/js/extend-2.6.7.js")
		<script(type="text/javascript",src="lib/sjs/testing.sjs")
	<body.reset.use-base.use-typography.use-texto.use-forms.use-testing
		# ---------------------------------------------------------------------
		#
		# DOCUMENT
		#
		# ---------------------------------------------------------------------
		<div.document
			<header
				<h1:Select
				<h2:2014-11-26
			<p.abstract
			<div.section
				<h3:Test case
				<div#testing
				<div#example.hidden
					<ul
						<li.one
							<ul
								<li.one
								<li.two
								<li.three
						<li.two
							<ul
								<li.one
								<li.two
						<li.three
							<ul
								<li.one
				<script@sugar
					var T = testing
					if typeof(modules select) == "undefined"
						alert "Select: module cannot be loaded"
					end
					var S = modules select
					var Selection = S Selection

					T testCase "Operations"

					T test "IsSelection"
					T asFalse  (Selection Is (document createElement    "div" ))
					T asFalse  (Selection Is (document createElementNS ("http://www.w3.org/2000/svg", "svg")))
					T asTrue   (Selection Is (new Selection ()))

					T test "IsNode"
					T asTrue  (Selection IsNode (document createElement    "div" ))
					T asTrue  (Selection IsNode (document createElementNS ("http://www.w3.org/2000/svg", "svg")))

					T test "IsDOM"
					T asTrue  (Selection IsDOM (document createElement    "div" ))
					T asFalse (Selection IsDOM (document createElementNS ("http://www.w3.org/2000/svg", "svg")))

					T test "IsSVG"
					T asFalse (Selection IsSVG (document createElement    "div" ))
					T asTrue  (Selection IsSVG (document createElementNS ("http://www.w3.org/2000/svg", "svg")))

					# =========================================================
					# SELECTION
					# =========================================================

					T testCase "Selection"

					T test "Unscoped"
					var s = S "#example"
					T equals      (s length, 1)
					T asUndefined (s scope)

					T test "Scoped:node"
					var n = document getElementById "example"
					var q = S ("> ul", n)
					T equals     (q length, 1)
					T asTrue     (Selection Is (q scope))
					T identical  (q scope nodes [0],  n)

					T test "Scoped:string"
					var q = S ("> ul", "#example")
					T equals     (q length, 1)
					T asTrue     (Selection Is (q scope))
					T identical  (q scope nodes [0],  document getElementById "example")

					var q = S ("> ul", "#example li")
					T equals     (q length, 3)
					T asTrue     (Selection Is (q scope))

					T test "Scoped:selection"
					var q = S ("> ul", s)
					T equals     (q length, 1)
					T identical  (q scope,  s)

					T test "select() transparency"
					var q = S ("#example > ul")
					T identical  (q,  S (q))

					# =========================================================
					# FIND
					# =========================================================

					T testCase "Selection.find(selector)"

					T test "From empty selection"
					var s = S ()
					var q = s find "#example"
					T equals       (s length, 0)
					T asUndefined  (s scope)
					T equals       (q length, 1)
					T asUndefined  (q scope)
					T notIdentical (q, s)

					T test "From 1-element selection"
					var s = S "#example"
					var q = s find "> ul > li"
					T equals       (s length, 1)
					T asUndefined  (s scope)
					T equals       (q length, 3)
					T identical    (q scope,  s)
					T notIdentical (q, s)

					T test "From N-element selection"
					var s = S "#example li"
					var q = s find "> ul"
					T equals       (s length, 9)
					T asUndefined  (s scope)
					T equals       (q length, 3)
					T identical    (q scope,  s)
					T notIdentical (q, s)

					# =========================================================
					# FILTER
					# =========================================================

					T testCase "Selection.filter(selector)"

					T test "From empty selection without selector"
					var s = S ()
					var q = s filter "li.one"
					T equals       (q length, 0)
					T asUndefined  (q scope)

					T test "From empty selection with selector"
					var s = S "#example"
					var q = s filter "li.one"
					T equals     (q length, 0)
					T identical  (q scope, s)

					T test "From 1-element selection"
					var s = S "#example li.one:first"
					var q = s filter "li.one"
					T equals     (s length, 1)
					T equals     (q length, 1)
					T identical  (q scope,  s)

					T test "From N-element selection"
					var s = S "#example li"
					var q = s filter "li.one"
					T equals     (s length, 9)
					T equals     (q length, 4)
					T identical  (q scope,  s)


					# =========================================================
					# TRAVERSAL
					# =========================================================

					T testCase "Selection.first()"

					T test "Empty selection"
					T identical   (S Empty first (),          S Empty)
					T equals      (S Empty first () length,   0)
					T asUndefined (S Empty first () nodes [0]) 

					T test "1-element selection"
					var q = S "#example"
					T identical (q first (), q)
					T equals    (q length,   1)
					T identical (q first () nodes [0], q nodes [0])

					T test "N-element selection"
					var q = S "#example li"
					T equals (q length,          9)
					T equals (q first () length, 1)
					T identical (q first () nodes [0], q nodes [0])

					T testCase "Selection.last()"

					T test "Empty selection"
					T identical (S Empty last (),          S Empty)
					T equals    (S Empty last () length,   0)
					T asUndefined (S Empty last () nodes [-1])

					T test "1-element selection"
					var q = S "#example"
					T identical (q last (), q)
					T equals    (q length,   1)
					T identical (q last () nodes [0], q nodes [0])

					T test "N-element selection"
					var q = S "#example li"
					T equals (q length,          9)
					T equals (q last () length, 1)
					T identical (q last () nodes [0], q nodes [-1])

					T testCase "Selection.eq()"

					T test "Empty selection"
					var q = S Empty
					T identical (q eq (0),  q)
					T identical (q eq (1),  q)
					T identical (q eq (-1), q)
					T equals    (q eq (0) length,  0)
					T asUndefined (q eq 0 nodes [0])

					T test "1-element selection"
					var q = S "#example"
					T equals    (q length,   1)
					T identical (q eq  0, q)
					T identical (q eq -1, q)
					T identical (q eq 1, S Empty)

					T test "N-element selection"
					var q = S "#example li"
					T equals (q length,   9)
					T identical   (q eq (0) nodes [0], q nodes [0])
					T asUndefined (q eq (0) nodes [1])
					T identical (q eq (1) nodes [0], q nodes [1])
					T asUndefined (q eq (0) nodes [1])
					T identical (q eq (2) nodes [0], q nodes [2])
					T identical (q eq (-1) nodes [0], q nodes [-1])
					T identical (q eq (-2) nodes [0], q nodes [-2])


					T end ()
		
# EOF
